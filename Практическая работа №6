//текстовый файл содержит статью в которой программа производит поиск строки в статье и выводит индекс с которого строка полностью совпадает с фрагментов текста
#include <limits.h>
#include <string.h>
#include <stdio.h>
#include <fstream>
#include <iostream>
# define NO_OF_CHARS 256
using namespace std;

int max(int a, int b)
{
	return (a > b) ? a : b;
}

// The preprocessing function for Boyer Moore's bad char heuristic
void badCharHeuristic(char* str, int size, int badchar[NO_OF_CHARS])
{
	int i;
	for (i = 0; i < NO_OF_CHARS; i++)
		badchar[i] = -1;
	for (i = 0; i < size; i++)
		badchar[(int)str[i]] = i;
}

void search(char* txt, char* pat)
{
	int m = strlen(pat);
	int n = strlen(txt);

	int badchar[NO_OF_CHARS];

	badCharHeuristic(pat, m, badchar);

	int s = 0; // s is the shift of the pattern with respect to text
	while (s <= (n - m))
	{
		int j = m - 1;
		while (j >= 0 && pat[j] == txt[s + j])
			j--;
		if (j < 0)
		{
			printf("\nPattern occurs at shift #%d", s);
			s += (s + m < n) ? m - badchar[txt[s + m]] : 1;
		}
		else
			s += max(1, j - badchar[txt[s + j]]);
	}
}
int main()
{
	ifstream file("textfortask6.txt");
	if (file)
	{
		file.seekg(0, file.end);
		int length = file.tellg();
		file.seekg(0, file.beg);
		char* quote = new char[length];
		file.get(quote, length, '*');
		//cout << quote << '\n';
		char pat[] = "Atlantic hurricane";
		search(quote, pat);
	}
	else
	{
		cout << "file could not be opened\n";
	}
	return 0;
}

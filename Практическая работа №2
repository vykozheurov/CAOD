//Exchange sort
#include <iostream>
#include <stdio.h> 
#include <time.h> 

using namespace std;

void max_heapify(int A[], int start, int end) {
    int dad = start;
    int son = dad * 2 + 1;
    while (son <= end) { 
        if (son + 1 <= end && A[son] < A[son + 1]) 
            son++;
        if (A[dad] > A[son]) 
            return;
        else {
            swap(A[dad], A[son]);
            dad = son;
            son = dad * 2 + 1;
        }
    }
}

void heap_sort(int A[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        max_heapify(A, i, n - 1);
    for (int i = n - 1; i >= 0; i--) {
        swap(A[0], A[i]);
        max_heapify(A, 0, i - 1);
    }
}

int main() {
    srand(time(NULL));
    int n;
    cin >> n;
    int* A = new int[n];
    for (int i = 0; i < n; i++) {
        A[i] = 1 + rand();
        cout << A[i] << " ";
    }
    cout << endl << endl;
    clock_t start, end;
    start = clock();
    heap_sort(A, n);
    end = clock();
    double seconds = ((double)end - start) / ((double)CLOCKS_PER_SEC);

    for (int i = 0; i < n; i++)
    {
        cout << A[i] << endl;
    }
    cout << "Time: " << seconds << " seconds";

    return (0);
}
